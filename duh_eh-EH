//Copyright 2016 George Rosar under Creative Commons Attribution-NonCommercial 4.0 International
global proc procWithOptionalArgs( string $argString ) {
$temp = `polyNormal -nm 4 $argString`;
 	float $minx = `getAttr ($temp[0] + ".boundingBox.boundingBoxMinX")`;
    float $maxx = `getAttr ($temp[0] + ".boundingBox.boundingBoxMaxX")`;
    float $miny = `getAttr ($temp[0] + ".boundingBox.boundingBoxMinY")`;
    float $maxy = `getAttr ($temp[0] + ".boundingBox.boundingBoxMaxY")`;
    float $minz = `getAttr ($temp[0] + ".boundingBox.boundingBoxMinZ")`;
    float $maxz = `getAttr ($temp[0] + ".boundingBox.boundingBoxMaxZ")`;

    float $x = $maxx - $minx;
    float $y = $maxy - $miny;
    float $z = $maxz - $minz;
} 
$new = `polyCube -w $x -h $y -d $z -sx 1 -sy 1 -sz 1 -ax 0 1 0 -cuv 4 -ch 1`;

procWithOptionalArgs("NO59OriaxBuildingMoldRD8Cleanup:SigilSideNode3");
/*window -t "Inverse" -w 250 -h 100 myWin;
	columnLayout -adj true;
		duplicate -inputConnections -parentOnly 
		string $bob = `polyNormal -nm 4`;
		button -l "Harrawss" -c ("findNode " + $bob);
showWindow myWin;*/

global proc distortObj(float $randomA, float $randomB)
{
float $Xpos;
float $Ypos;
float $Zpos;
string $sel[] = `ls -sl`;
int $vtxCount[];
int $k = 0;
for ($each in $sel)
{
int $vtxInfo[] = `polyEvaluate -vertex $each`;
$vtxCount[$k] = $vtxInfo[0];
$k++;
}
for ($i=0;$i<size($vtxCount);$i++)
{
for($j=0;$j<($vtxCount[$i]);$j++)
{
$Xpos = rand($randomA, $randomB);
$Ypos = rand($randomA, $randomB);
$Zpos = rand($randomA, $randomB);
move -r $Xpos $Ypos $Zpos ($sel[$i] + ".vtx["+$j+"]");
}
}
}
/*


global proc string[] partialCacoon( string $flagStr ) {
string $manipStr = $flagStr;
string $flagTokens[];
string $flagNames[];
int $n=0; //overflow control
//replace any negative number signs with ? so we can tokenize the option string into individual flags
while( `match "-[0-9]+" $manipStr` != "" && $n<0xffffffg ) {
$reuterNet = `polyNormal $args -nm 4`;
}

global proc getCurveData(string $tnode, float $step, vector $data[]) {
    int     $count = size($data);
    string  $part;
    float   $pos[];
    int     $spans = `getAttr ($tnode + ".spans")`;
    for($i = 0.0;$i <= 1.0;$i = $i + $step) {
        $pos = `pointOnCurve -pr ($i * $spans) -p $tnode`;
        $data[$count] = <<$pos[0], $pos[1], $pos[2]>>;
        $count++;
        }
    }
vector $data[];
getCurveData("curve1", 0.005, $data);
for($i = 0; $i < size($data); $i++) {
    vector $pos = $data[$i];
    print($pos.x + " " + $pos.y + " " + $pos.z + "\n");
    }





 //This script snaps a vertex to the closest vertex on a reference mesh. 
 //written by Ben Bathen March 11, 2006
 //www.benbathen.com

//string $roots[] = `ls -assemblies`;
//string $sel[] = ls -sl;

scriptJob -e $
 "print " +
  $1

scriptJob -e `ls $roots`

for ( $each in $sel )
{
float $minX = getAttr ( $each + ".boundingBoxMinX" );
float $maxX = getAttr ( $each + ".boundingBoxMaxX" );
float $minY = getAttr ( $each + ".boundingBoxMinY" );
float $maxY = getAttr ( $each + ".boundingBoxMaxY" );
float $minZ = getAttr ( $each + ".boundingBoxMinZ" );
float $maxZ = getAttr ( $each + ".boundingBoxMaxZ" );

float $xLen = ( $maxX - $minX );
float $yLen = ( $maxY - $minY );
float $zLen = ( $maxZ - $minZ );

float $vol = ( $xLen * $yLen * $zLen );

pickWalk -d down;

$rigid=pickWalk -d right;

eval ( "setAttr " + $rigid[0] + ".mass " + $vol);
}; 


 global proc bb_snapToClosestVert ()
 {

	global string $snapToClosestVertWindow;
	global string $sTCVtextFieldName;
	global string $sTCVfloatFieldGrp;
	global string $textFieldString;

	if (`window -ex $snapToClosestVertWindow`)
		{
			deleteUI -window $snapToClosestVertWindow;
		}
	
	
	$snapToClosestVertWindow = `window  -title "VR_BB_snapToClosestVert" -width 275 -height 107 -s 0`;

	columnLayout -cal "center" ;
	text -label "enter a maximum distance";
	$sTCVfloatFieldGrp = `floatFieldGrp -w 50  -v1 .1`;

	text -label "load the mesh to use as a reference";
	$sTCVtextFieldName = `textFieldButtonGrp -tx $textFieldString -bl load -bc loadRefMesh`;

	setParent ..;	 

	rowLayout -nc 2 -cw2 135 135 -ct2 "both" "both" -cl2 "center" "center" ;
	string $runButton = `button -label Run  -command captureUIInfo`;
	string $cancelButton = `button -label Cancel  -command ("deleteUI -window " + $snapToClosestVertWindow)`;

	//make sure the window is the right size
	
	window -e -width 275 -height 250 -s 0 $snapToClosestVertWindow;
	showWindow $snapToClosestVertWindow;
}


//This procedure runs when you hit the load button
global proc loadRefMesh ()
{

global string $sTCVtextFieldName;
global string $textFieldString;

string $sel[] = `ls -sl`;

textFieldButtonGrp -e -tx $sel[0] $sTCVtextFieldName;
$textFieldString = $sel[0];
}



//This procedure snaps a vertex on one model to the closest vertex on another model.
global proc captureUIInfo ()
{
global string $sTCVtextFieldName;

string $vertices[] = `ls -sl -fl`;

string $refObject = `textFieldGrp -q -tx $sTCVtextFieldName`;

for ($each in $vertices)
	{
	runSnapToClosestVert $each $refObject;
	}

}


global proc runSnapToClosestVert (string $vertex, string $refObject)
{

global string $sTCVfloatFieldGrp;

//find the world space position of the vertex.
float $vertPosition[] = `pointPosition -w $vertex`;

//find out how many verts are in the reference object;

int $refVertCount[] = `polyEvaluate -v $refObject`;


//find the shape of the reference model.
string $refShape[] = `listRelatives -f -s $refObject `;

int $i;


float $tolerance = `floatFieldGrp -q  -v1 $sTCVfloatFieldGrp`;

float $closestDistance = 10000;
string $closestVert;
float $closestPosition[];

	//for each vertex in the reference model.
	for ($i = 0; $i < $refVertCount[0]; $i++)
		{
		//find the world space position of the vert on the reference model;
		float $refVertPos[] = `pointPosition -w ($refShape[0] + ".vtx[" + $i + "]")`;

		//find the difference between the two positions.

		float $xValue = $vertPosition[0] - $refVertPos[0];

		float $yValue = $vertPosition[1] - $refVertPos[1];

		float $zValue = $vertPosition[2] - $refVertPos[2];

		vector $difference = <<$xValue, $yValue, $zValue>>;

		//find the distance between the two points
		float $distance = `mag $difference`;
		
		//if the distance between the verts is lower than the distance between the previous vert.
		if ($distance < $closestDistance)
			{
			//store the closest distance so far.
			$closestDistance = $distance;
			//store the name of the closest vertex so far
			$closestVert = ($refShape[0] + ".vtx[" + $i + "]");
			//store the closest position so far.
			$closestPosition = $refVertPos;
			}		
		}

if ($closestDistance < $tolerance)
	{
		move -ws  $closestPosition[0] $closestPosition[1] $closestPosition[2] $vertex;
		refresh;
	}

}
*/